Given a string of odd length, return the string length 3 from its middle, so "Candy" yields "and". The string length will be 
at least 3. 

middleThree("Candy") → "and"
middleThree("and") → "and"
middleThree("solving") → "lvi"

//I suck at coding... 

public String middleThree(String str) {
    if(str.length() > 3)
    {
        int middle = str.length()/2;
        return str.substring(middle - 1, middle + 2);
    }
    else
    {
        return str;
    }
}


Given a string, return true if "bad" appears starting at index 0 or 1 in the string, such as with "badxxx" or "xbadxx" but not "xxbadxx". The string may be any length, including 0. Note: use .equals() to compare 2 strings. 

hasBad("badxx") → true
hasBad("xbadxx") → true
hasBad("xxbadxx") → false

//Actually got this one, but I want to post my solution and the website's solution here:

//My solution:

public boolean hasBad(String str) {
    if(str.startsWith("bad") || str.startsWith("bad", 1))
    {
        return true;
    }
    else
    {
        return false;
    }
}

//Website solution:

public boolean hasBad(String str) {
  if (str.length()>=3 && str.substring(0, 3).equals("bad")) {
    return true;
  }
  if (str.length()>=4 && str.substring(1, 4).equals("bad")) {
    return true;
  }
  return false;
  
  // Solution notes: basically want to call substring(0, 3) and
  // substring(1, 4) and check if that equals "bad". Need to check
  // the length first so as to not go off the end of the string.
  // Alternately one could use indexOf() -- that code is short
  // but it runs much slower, since it needlessly checks over the whole
  // string.
}

Given a string, return a string length 2 made of its first 2 chars. If the string length is less than 2, use '@' for the missing chars. 

atFirst("hello") → "he"
atFirst("hi") → "hi"
atFirst("h") → "h@"

//Totally forgot about switch statements. This helps a lot! Not my idea to use switch statements though which sucks, but I know
to use them now.

public String atFirst(String str) {
    if(str.length() >= 2)
    {
        return str.substring(0,2);
    }
    else
    {
        switch(str.length())
        {
            case 0: return("@@");
            case 1: return(str.substring(0,str.length()) + "@");
            case 2: return(str.substring(0,str.length()));
            default: return("");
        }
    }
}

Given two strings, append them together (known as "concatenation") and return the result. However, if the strings are different
lengths, omit chars from the longer string so it is the same length as the shorter string. So "Hello" and "Hi" yield "loHi".
The strings may be any length. 

minCat("Hello", "Hi") → "loHi"
minCat("Hello", "java") → "ellojava"
minCat("java", "Hello") → "javaello"

//My solution, made me happy I solved this even though it's beginner.

public String minCat(String a, String b) {

    int lenA = a.length();
    int lenB = b.length();
    String result = "";
    
    if(lenA == lenB)
    {
        result = a + b;
    }
    else if(lenA > lenB)
    {
        result = a.substring((lenA - lenB), lenA) + b;
    }
    else if(lenB > lenA)
    {
        result = a + b.substring((lenB - lenA), lenB);
    }
    
    return result;
}
