Given a string of odd length, return the string length 3 from its middle, so "Candy" yields "and". The string length will be 
at least 3. 

middleThree("Candy") → "and"
middleThree("and") → "and"
middleThree("solving") → "lvi"

//I suck at coding... 

public String middleThree(String str) {
    if(str.length() > 3)
    {
        int middle = str.length()/2;
        return str.substring(middle - 1, middle + 2);
    }
    else
    {
        return str;
    }
}


Given a string, return true if "bad" appears starting at index 0 or 1 in the string, such as with "badxxx" or "xbadxx" but not "xxbadxx". The string may be any length, including 0. Note: use .equals() to compare 2 strings. 

hasBad("badxx") → true
hasBad("xbadxx") → true
hasBad("xxbadxx") → false

//Actually got this one, but I want to post my solution and the website's solution here:

//My solution:

public boolean hasBad(String str) {
    if(str.startsWith("bad") || str.startsWith("bad", 1))
    {
        return true;
    }
    else
    {
        return false;
    }
}

//Website solution:

public boolean hasBad(String str) {
  if (str.length()>=3 && str.substring(0, 3).equals("bad")) {
    return true;
  }
  if (str.length()>=4 && str.substring(1, 4).equals("bad")) {
    return true;
  }
  return false;
  
  // Solution notes: basically want to call substring(0, 3) and
  // substring(1, 4) and check if that equals "bad". Need to check
  // the length first so as to not go off the end of the string.
  // Alternately one could use indexOf() -- that code is short
  // but it runs much slower, since it needlessly checks over the whole
  // string.
}
