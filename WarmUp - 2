Given a string, return true if the first instance of "x" in the string is immediately followed by another "x". 

doubleX("axxbb") → true
doubleX("axaxax") → false
doubleX("xxxxx") → true

//This is wrong with everything but one test. 

boolean doubleX(String str) { 
    boolean decide = false;
    int index = str.indexOf("x");
    if(str.length() >= 2)
    {
        if(!(Character.toString(str.charAt(index + 1)).isEmpty()) && Character.toString(str.charAt(index + 1)).equals("x"))
        {
            decide = true;
        }
        else
        {
            decide = false;
        }
    }
    return decide;
}

//Solution below

boolean doubleX(String str) { 
    boolean decide = false;
    int index = str.indexOf("x");
    if(index == -1)
    {
        decide = false;
    }
    
    if(index + 1 >= str.length())
    {
        decide = false;
    }
    
    else if(str.substring(index + 1, index + 2).equals("x"))
    {
        decide = true;
    }
    
    return decide;
}

//Another solution with startsWith() method.
boolean doubleX(String str) { 
    boolean decide = false;
    int index = str.indexOf("x");
    if(str.startsWith("xx", index))
    {
        return true;
    }
    else
    {
        return false;
    }
}


Given a string, return a version where all the "x" have been removed. Except an "x" at the very start or end should not be removed. 

stringX("xxHxix") → "xHix"
stringX("abxxxcd") → "abcd"
stringX("xabxxxcdx") → "xabcdx"

//Solution below

public String stringX(String str) {
    String newstr = "";
    for(int i = 0; i < str.length(); i++)
    {
        String index = Character.toString(str.charAt(i));
        if(!(i > 0 && i < str.length() - 1 && index.equals("x")))
        {
            newstr += index;
        }
    }
    return newstr;
}


Given a string, return a string made of the chars at indexes 0,1, 4,5, 8,9 ... so "kittens" yields "kien". 

altPairs("kitten") → "kien"
altPairs("Chocolate") → "Chole"
altPairs("CodingHorror") → "Congrr"

//My horrible solution that will only work for words up to a length of 18. I suck at coding. I knew I could do this with a loop I just didn't understand how.

public String altPairs(String str) {
    String newstr = "";
    
    if(str.length() >= 2 && str.length() <= 4)
    {
        return str.substring(0, 2);
    }
    
    else if(str.length() >=2 && str.length() <= 6)
    {
        return str.substring(0,2) + str.substring(4,str.length());
    }
    
    else if(str.length() >= 2 && str.length() <= 10)
    {
        return str.substring(0,2) + str.substring(4,6) + str.substring(8,str.length());
    }
    
    else if(str.length() >= 2 && str.length() <= 14)
    {
        return str.substring(0,2) + str.substring(4,6) + str.substring(8,10) + str.substring(12,str.length());
    }
    
    else if(str.length() >= 2 && str.length() <= 18)
    {
        return str.substring(0,2) + str.substring(4,6) + str.substring(8,10) + str.substring(12,14) + str.substring(16,str.length());
    }
    
    else
    {
        return str;
    }
}

//Actual solution below. Makes a lot of sense when I see the solution. I WISH I THOUGHT OF THAT!

public String altPairs(String str) {
    String newstr = "";
    
    for(int i = 0; i < str.length(); i += 4)
    {
        int end = i + 2;
        if(end > str.length()) 
        {
            end = str.length();
        }
        newstr += str.substring(i, end);
    }
    return newstr;
}


Given an array of ints, we'll say that a triple is a value appearing 3 times in a row in the array. Return true if the array does not contain any triples. 

noTriples({1, 1, 2, 2, 1}) → true
noTriples({1, 1, 2, 2, 2, 1}) → false
noTriples({1, 1, 1, 2, 2, 2, 1}) → false

//Solution, iterate through array and set index i to variable first. Then check if i + 1 and i + 2 equal first. If they do return false.
else return true.

public boolean noTriples(int[] nums) {
    int counter = 0;
    for(int i = 0; i < (nums.length - 2); i++)
    {
        //Set a int variable first to index i.
        int first = nums[i];
        //If index i equals index i + 1 and index i + 2, return false.
        if(nums[i + 1] == first && nums[i + 2] == first)
        {
            return false;
        }
    }
    return true;
}

Given an array of ints, return true if it contains a 2, 7, 1 pattern -- a value, followed by the value plus 5, followed by the value minus 1. Additionally the 271 counts even if the "1" differs by 2 or less from the correct value. 

has271({1, 2, 7, 1}) → true
has271({1, 2, 8, 1}) → false
has271({2, 7, 1}) → true

//Second part of this problem gave me trouble. Making sure that the "1" differs by two or less was weird. The solution confused me at first, but now it makes sense. I need to get better at figuring this crap out. Didn't even occur to me to use Math.abs()

//Solution:

public boolean has271(int[] nums) {
    boolean decide = false;
    for(int i = 0; i < nums.length - 2; i++)
    {
        int first = nums[i];
        if(nums[i + 1] == first + 5 && Math.abs(nums[i + 2] - (first - 1)) <= 2)
        {
            decide = true;
        }
        else
        {
            decide = false;
        }
    }
    return decide;
}
