Given a positive int n, return true if it contains a 1 digit. Note: use % to get the rightmost digit, and / to discard the rightmost digit. 

hasOne(10) → true
hasOne(22) → false
hasOne(220) → false

//Solution:

public boolean hasOne(int n) {
    //While n = 10 or n divded by 10 has no remainder
    while(n % 10 != 0 || n == 10)
    {
        //If the number % 10 == 1 return true. This checks the rightmost digit if it is a 1.
        if(n % 10 == 1)
        {
            return true;
        }
        //Else divide the number by 10 and get rid of the rightmost digit. Then redo the loop if it still satisfies the conditions.
        It either eventually has a 1 digit, or it doesn't and the while loops ends, returning false.
        else
        {
            n /= 10;
        }
    }
    return false;
}
