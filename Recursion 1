Given a non-negative int n, return the sum of its digits recursively (no loops). Note that mod (%) by 10 yields the 
rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12). 

sumDigits(126) → 9
sumDigits(49) → 13
sumDigits(12) → 3

//This solution confused me, but makes sense. 

public int sumDigits(int n) {
    if(n < 10)
    {
        return n;
    }
    else
    {
        return (n % 10) + sumDigits(n / 10);
    }
}

We have bunnies standing in a line, numbered 1, 2, ... The odd bunnies (1, 3, ..) have the normal 2 ears. 
The even bunnies (2, 4, ..) we'll say have 3 ears, because they each have a raised foot. Recursively return the
number of "ears" in the bunny line 1, 2, ... n (without loops or multiplication). 

bunnyEars2(0) → 0
bunnyEars2(1) → 2
bunnyEars2(2) → 5

public int bunnyEars2(int bunnies) {
    if(bunnies == 0)
    {
        return 0;
    }
    if(bunnies % 2 == 0)
    {
        return bunnyEars2(bunnies - 1) + 3;
    }
    else
    {
        return bunnyEars2(bunnies - 1) + 2;
    }
}
